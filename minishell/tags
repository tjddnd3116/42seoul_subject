!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Libft/Makefile	/^CC = gcc$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CFLAGES	Makefile	/^CFLAGES = -Wall -Wextra -Werror$/;"	m
CFLAGS	Libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
COMFILE_FLAGS	Makefile	/^COMFILE_FLAGS = -lreadline -L\/opt\/homebrew\/opt\/readline\/lib$/;"	m
INCLUDES	Libft/Makefile	/^INCLUDES = ..\/includes\/libft.h$/;"	m
INCLUDES	Makefile	/^INCLUDES = .\/includes\/minishell.h$/;"	m
LIBFT	Makefile	/^LIBFT = libft$/;"	m
LIBFT_H	Libft/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_LIB	Makefile	/^LIBFT_LIB = Libft\/libft.a$/;"	m
MINISHELL_H	includes/minishell.h	/^# define MINISHELL_H$/;"	d
NAME	Libft/Makefile	/^NAME = libft.a$/;"	m
NAME	Makefile	/^NAME = minishell$/;"	m
OBJS	Libft/Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OBJS	Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OBJS_B	Libft/Makefile	/^OBJS_B = $(SRCS_B:.c=.o)$/;"	m
OBJ_FLAGS	Makefile	/^OBJ_FLAGS = -I\/opt\/homebrew\/opt\/readline\/include$/;"	m
SRCS	Libft/Makefile	/^SRCS = ft_bzero.c ft_memset.c ft_strlen.c ft_memcpy.c \\$/;"	m
SRCS	Makefile	/^SRCS = main.c \\$/;"	m
SRCS_B	Libft/Makefile	/^SRCS_B = ft_lstnew.c ft_lstadd_front.c ft_lstsize.c ft_lstlast.c \\$/;"	m
add_env	src/cd.c	/^void	add_env(t_env *env, char *key, char *value)$/;"	f
all_print_list	main.c	/^void all_print_list(t_data *data)$/;"	f
ch_env	src/cd.c	/^void	ch_env(t_env *env, char *key, char *value)$/;"	f
check_cmd	src/check_cmd.c	/^int	check_cmd(t_data *data)$/;"	f
check_over_range	Libft/ft_atoi.c	/^int	check_over_range(unsigned long long sum, int sign)$/;"	f
child	src/pipe.c	/^void	child(t_m_list *list, t_data *data)$/;"	f
cmd_cnt	src/redirection.c	/^int	cmd_cnt(t_cmd *cmd)$/;"	f
cmd_set	includes/minishell.h	/^	char		*cmd_set;$/;"	m	struct:s_data
cmdline	includes/minishell.h	/^	char	**cmdline;$/;"	m	struct:s_cmd
cmdline_change	src/reparsing_cmd.c	/^char	*cmdline_change(char *cmdline, t_env *env)$/;"	f
content	Libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	includes/minishell.h	/^	struct s_cmd	*content;$/;"	m	struct:s_m_list	typeref:struct:s_m_list::s_cmd
create_child	src/pipe.c	/^void	create_child(t_m_list *list, t_data *data, int prev)$/;"	f
delete_env	src/unset.c	/^void	delete_env(t_env **env, char *key, t_data *data)$/;"	f
dollar_sign	src/quote.c	/^char	*dollar_sign(char *cmdline, t_env *env)$/;"	f
double_quote	src/quote.c	/^char	*double_quote(char *cmdline, t_env *env)$/;"	f
env	includes/minishell.h	/^	t_env		*env;$/;"	m	struct:s_data
env_num	src/env.c	/^int	env_num(t_env *env)$/;"	f
error_msg	src/error.c	/^void	error_msg(char *str)$/;"	f
exec_extern	src/execute.c	/^void	exec_extern(t_cmd *cmd, char **env, t_env *envs)$/;"	f
execute	src/execute.c	/^void	execute(t_data *data, t_m_list *list)$/;"	f
execute_cmd	src/execute.c	/^void	execute_cmd(t_data *data, t_cmd *cmd, t_env *env, int flag)$/;"	f
execute_extern	src/execute.c	/^void	execute_extern(t_cmd *cmd, char **env, t_env *envs)$/;"	f
execute_list	src/execute.c	/^void	execute_list(t_m_list *list, t_data *data, int b_stdin, int b_stdout)$/;"	f
export_util	src/export.c	/^t_env	*export_util(t_cmd *cmd, int i, t_env *env, t_env *cur)$/;"	f
fd	includes/minishell.h	/^	int		fd[2];$/;"	m	struct:s_cmd
find_env	src/cd.c	/^t_env	*find_env(char *key, t_env *env)$/;"	f
find_quote_match	src/parsing_util.c	/^int	find_quote_match(char *tmp, int i)$/;"	f
find_rd_type	src/rd_util.c	/^int	find_rd_type(char *rd)$/;"	f
flag	includes/minishell.h	/^	int		flag;$/;"	m	struct:s_cmd
free_cmd_data	src/free_list.c	/^void	free_cmd_data(t_cmd *content)$/;"	f
free_cmd_list	src/free_list.c	/^void	free_cmd_list(t_data *data)$/;"	f
free_env	src/unset.c	/^void	free_env(t_env **cur)$/;"	f
free_env_list	src/free_list.c	/^void	free_env_list(t_data *data)$/;"	f
free_envp	src/free_list.c	/^void	free_envp(char **env)$/;"	f
ft_atoi	Libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	Libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	Libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_cd	src/cd.c	/^void	ft_cd(t_cmd *cmd, t_env *env)$/;"	f
ft_chdir	src/cd.c	/^void	ft_chdir(char *dest, t_env *env)$/;"	f
ft_exit	src/exit.c	/^void	ft_exit(t_cmd *cmd, int flag, t_data *data)$/;"	f
ft_export	src/export.c	/^void	ft_export(t_cmd *cmd, t_env *env)$/;"	f
ft_find	Libft/ft_strnstr.c	/^static int	ft_find(const char *haystack, const char *needle, size_t i)$/;"	f	file:
ft_find	Libft/ft_strtrim.c	/^static int	ft_find(char const *set, char c)$/;"	f	file:
ft_free	Libft/ft_split.c	/^static void	ft_free(char **arr)$/;"	f	file:
ft_isalnum	Libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	Libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	Libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	Libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	Libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	Libft/ft_atoi.c	/^int	ft_isspace(const char c)$/;"	f
ft_itoa	Libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	Libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	Libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	Libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	Libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	Libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	Libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	Libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	Libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	Libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memccpy	Libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	Libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	Libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	Libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	Libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	Libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_nlen	Libft/ft_itoa.c	/^int	ft_nlen(int n)$/;"	f
ft_put_in	Libft/ft_itoa.c	/^void	ft_put_in(int n, char *tmp, int len)$/;"	f
ft_putchar_fd	Libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char s, int fd)$/;"	f
ft_putendl_fd	Libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putin	Libft/ft_split.c	/^static void	ft_putin(char const *s, char *arr, int from, int i)$/;"	f	file:
ft_putnbr_fd	Libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	Libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_sep	Libft/ft_split.c	/^static void	ft_sep(char const *s, char c, char **arr)$/;"	f	file:
ft_sep_cnt	Libft/ft_split.c	/^static size_t	ft_sep_cnt(char const *s, char c)$/;"	f	file:
ft_split	Libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	Libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcmp	src/unset.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strdup	Libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strjoin	Libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_free	src/util.c	/^char	*ft_strjoin_free(char *s1, char *s2)$/;"	f
ft_strlcat	Libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t detsize)$/;"	f
ft_strlcpy	Libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t detsize)$/;"	f
ft_strlen	Libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	Libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	Libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	Libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	Libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	Libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	Libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	Libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	Libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_unset	src/unset.c	/^void	ft_unset(t_cmd *cmd, t_env *env, t_data *data)$/;"	f
g_status	main.c	/^int	g_status = 0;$/;"	v
get_envlen	src/env.c	/^int	get_envlen(char **env)$/;"	f
get_keylen	src/env_util.c	/^int	get_keylen(char *str)$/;"	f
heredoc	src/rd_util.c	/^void	heredoc(char *end)$/;"	f
init_cmd	src/init_shell.c	/^void	init_cmd(t_cmd *cmd_data, char *cmd, char let)$/;"	f
init_env	src/env.c	/^t_env	*init_env(char **envp)$/;"	f
init_struct	src/init_shell.c	/^void	init_struct(t_data *data, char **envp)$/;"	f
is_numeric	src/exit.c	/^int	is_numeric(char *str)$/;"	f
join_path	src/util.c	/^void	join_path(t_cmd *cmd, char **path, char **command)$/;"	f
key	includes/minishell.h	/^	char			*key;$/;"	m	struct:s_env
key_len	src/quote.c	/^int	key_len(char *str)$/;"	f
lstlast	includes/minishell.h	/^	t_m_list	*lstlast;$/;"	m	struct:s_data
main	main.c	/^int	main(int ac, char **av, char **envp)$/;"	f
make_envp	src/env.c	/^char	**make_envp(t_env *env)$/;"	f
mixed_quote	src/quote.c	/^char	*mixed_quote(char *cmdline, t_env *env)$/;"	f
new_env	src/env.c	/^t_env	*new_env(char *envline, t_env *env)$/;"	f
new_put_in_cmdline	src/parsing_util.c	/^char	*new_put_in_cmdline(char *cmd, int *i)$/;"	f
next	Libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	includes/minishell.h	/^	struct s_env	*next;$/;"	m	struct:s_env	typeref:struct:s_env::s_env
next	includes/minishell.h	/^	struct s_m_list	*next;$/;"	m	struct:s_m_list	typeref:struct:s_m_list::s_m_list
out	includes/minishell.h	/^	int		out;$/;"	m	struct:s_cmd
parsing	src/parsing_cmd.c	/^void	parsing(t_data *data)$/;"	f
parsing_proc	src/parsing_cmd.c	/^int	parsing_proc(t_data *data, char *tmp)$/;"	f
pipe_error_check	src/check_cmd.c	/^int	pipe_error_check(t_data *data)$/;"	f
pipe_error_check2	src/check_cmd.c	/^int	pipe_error_check2(t_m_list *tmp, int flag)$/;"	f
print_export	src/export.c	/^void	print_export(t_env *env)$/;"	f
print_not_valid	src/export.c	/^void	print_not_valid(char *cmd, char *str)$/;"	f
print_rd_error	src/redirection.c	/^void	print_rd_error(t_cmd *cmd, int status, char *cmdtype)$/;"	f
put_in_cmd	src/parsing_cmd.c	/^void	put_in_cmd(t_data *data, char *cmd, char let)$/;"	f
put_in_cmdline	src/parsing_util.c	/^char	*put_in_cmdline(char *cmd, char let, int *i)$/;"	f
put_in_cmdline_normal	src/parsing_util.c	/^char	*put_in_cmdline_normal(char *cmd, char let, int *i)$/;"	f
putin	src/quote_split.c	/^void	putin(char *cmd, char *cmdline, int from, int i)$/;"	f
quote_index	src/parsing_util.c	/^int	quote_index(char *cmd, char let, int *index)$/;"	f
quote_split	src/quote_split.c	/^char	**quote_split(char *cmd, char c)$/;"	f
rd_double_out	src/rd_util.c	/^int	rd_double_out(char *file)$/;"	f
rd_handler	src/redirection.c	/^int	rd_handler(t_cmd *cmd)$/;"	f
rd_in	src/rd_util.c	/^int	rd_in(char *file)$/;"	f
rd_out	src/rd_util.c	/^int	rd_out(char *file)$/;"	f
redirect	src/redirection.c	/^int	redirect(t_cmd *cmd, char **cmdline, char **new_cmdline, int dup_out)$/;"	f
redirection	src/redirection.c	/^int	redirection(char *file, int type, int dup_out, int out)$/;"	f
reparsing_env	src/reparsing_cmd.c	/^void	reparsing_env(t_data *data)$/;"	f
replace_dollar	src/env_util.c	/^char	*replace_dollar(char *str, t_env *env)$/;"	f
replace_env	src/util.c	/^t_env	*replace_env(char **split_env, t_env *findenv)$/;"	f
s_cmd	includes/minishell.h	/^typedef struct s_cmd$/;"	s
s_data	includes/minishell.h	/^typedef struct s_data$/;"	s
s_env	includes/minishell.h	/^typedef struct s_env$/;"	s
s_list	Libft/libft.h	/^typedef struct s_list$/;"	s
s_m_list	includes/minishell.h	/^typedef struct s_m_list$/;"	s
sep_cmdline	src/quote_split.c	/^void	sep_cmdline(char *cmd, char c, char **cmdline)$/;"	f
sep_cnt_quote	src/quote_split.c	/^int	sep_cnt_quote(char *cmd, char c)$/;"	f
setting_signal	src/init_shell.c	/^void	setting_signal(void)$/;"	f
show_prompt	src/prompt.c	/^void	show_prompt(t_data *data)$/;"	f
sigint_handler	src/init_shell.c	/^void	sigint_handler(int signal)$/;"	f
sigquit_handler	src/init_shell.c	/^void	sigquit_handler(int signal)$/;"	f
single_quote	src/quote.c	/^char	*single_quote(char *cmdline)$/;"	f
syntax_error_msg	src/error.c	/^void	syntax_error_msg(char let)$/;"	f
t_cmd	includes/minishell.h	/^}	t_cmd;$/;"	t	typeref:struct:s_cmd
t_data	includes/minishell.h	/^}	t_data;$/;"	t	typeref:struct:s_data
t_env	includes/minishell.h	/^}	t_env;$/;"	t	typeref:struct:s_env
t_list	Libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_m_list	includes/minishell.h	/^}	t_m_list;$/;"	t	typeref:struct:s_m_list
value	includes/minishell.h	/^	char			*value;$/;"	m	struct:s_env
